package com.suprapartimport.system.item;

// Jakarta Persistence is the API for the management for persistence and object/relational mapping.
import javax.persistence.*;
import java.util.Date;


@Entity // Hibernate, mapping an object-oriented domain model to a relational database
@Table // Spring Data JPA annotation
public class Item {
    // Here we are defining a specification of Id column generation in Item table via GeneratedValue supported by SequenceGenerator.
    @Column(nullable = false)
    @Id
    @SequenceGenerator( // Defines a primary key generator that may be referenced by name when a generator element is specified for the GeneratedValue annotation. A sequence generator may be specified on the entity class or on the primary key field or property. The scope of the generator name is global to the persistence unit (across all generator types).
            name = "item_sequence",
            sequenceName = "item_sequence",
            allocationSize = 1 // 'allocationSize' doesn't mean that the entities ids will increase by this value but it is a number after which the database query will be made again to get the next database sequence value. On the application side, ids for an entities instances will always increase by 1 unless we reach the allocationSize limit. After 'allocationSize' is reached, the next id will be retrieved from the database sequence again. In case if application restarts or redeployed before allocationSize limit is reached, we will see a one-time jump in the next value. 'allocationSize' is to improve performance.
    )
    @GeneratedValue( // The @GeneratedValue annotation specifies how to generate values for the given column. This annotation will help in creating primary keys values according to the specified strategy.
            strategy = GenerationType.SEQUENCE,
            generator = "item_sequence"
    )
    private Long id;
    @Column(nullable = false)
    private String name;

    // This annotation must be specified for persistent fields or properties of type java.util.Date and java.util.Calendar.
    // It may only be specified for fields or properties of these types.
    // When dealing with temporal data, you might want to describe the expected precision in database.
    // Temporal data can have DATE, TIME, or TIMESTAMP precision (i.e., the actual date, only the time, or both). Use the @Temporal annotation to fine tune that.
    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    private Date dateAdded;

    // JPA annotation and therefore should work in all compatible persistence frameworks.
    // It indicates a method that should be invoked on particular entity lifecycle event. (Other events are well documented in the Hibernate user guide here).
    @PrePersist
    private void onCreate () {
        dateAdded = new Date();
    }

    @Column(nullable = true)
    private String description;
    // Defining constructors in order to create instances of a class later on with defined parameters
    // We have constructors without parameters, with all parameters and all parameters except ID (as it will be generated by database).

    // Constructor 1 - without parameters
    public Item() {
    }

    // Constructor 2 - with all parameters
    public Item(Long id, String name, Date dateAdded, String description) {
        this.id = id;
        this.name = name;
        this.dateAdded = dateAdded;
        this.description = description;
    }

    // Constructor 3 - with name parameter
    public Item(String name) {
        this.name = name;
    }

    // We define getters and setters,
    // With setters we may set/update value of the attribute
    // Getters are needed to retrieve the attribute
    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Date getDateAdded() {
        return dateAdded;
    }

    public void setDateAdded(Date dateAdded) {
        this.dateAdded = dateAdded;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    // A toString() is an in-built method in Java that returns the value given to it in string format.
    // Hence, any object that this method is applied on, will then be returned as a string object.

    @Override
    public String toString() {
        return "Item{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", dateAdded=" + dateAdded +
                ", description='" + description + '\'' +
                '}';
    }
}
